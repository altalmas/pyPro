# Also, we can add an external library using 'find_package()'

has 2 modes:
    1. Module Mode : using (FindXXX.cmake)
    2. Config Mode : using (XXXConfig.cmake)
We install the library into the system, then we 'find_package()'

there we will have :

            hello_project
                |- CMakeLists.txt
                |- main.cpp
                |- blah
                |   |- Blah.cpp
                |   |- include
                |   |    |- Blah.h


cmake_minimum_required(VERSION 3.10)

set(CMAKE_CXX_STANDARDS 17)
set(CMAKE_CXX_STANDARDS_REQUIRED ON)

project(hello VERSION 1.0)

find_package (SFML 2 REQUIRED network audio graphics window system)     # SFML : package to find
                                                                        # 2 : version 2 of SFML 
                                                                        # REQUIRED : I don't know :)
                                                                        # network audio graphics window system : additional subcomponents
                                                                        
                                                                        # Note: the 'find_package()' sets certain 'result' variables like:
                                                                        #    1. *_INCLUDE_DIR
                                                                        #    2. *_LIBRARIES
                                                                        #    3. *_DEPENDENCIES
                                                                        #(this is different from library to library)

add_executable(hello main.cpp)
target_include_directories(hello PUBLIC ${SFML_INCLUDE_DIR})       # here the 'SFML_INCLUDE_DIR' is defined by 'find_package()'
target_link_libraries(hello PUBLIC mylib ${SFML_LIBRARIES} ${SFML_DEPENDENCIES})
